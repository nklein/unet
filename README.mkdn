;; Copyright (c) 2011 nklein software
;; MIT License. See included LICENSE.txt file for licensing details.

# UNet v0.1.2011.03.07

Patrick Stein <pat@nklein.com>

* [Overview](#overview)
  
## <a name="overview">Overview</a>

This library builds upon the [USerial library][userial] and
the [IOLib library][iolib] to provide a datagram networking
layer with variable quality of service.

  [userial]: http://nklein.com/software/unet/userial/
  [iolib]:   http://common-lisp.net/project/iolib/

To start sending and receiving data, one creates a server
instance specifying the port number the server will receive
messages on and send messages from.  If not specified, the
port number defaults to `26354`.

    (defvar *s* (make-instance 'unet:server :port 1187))

Then, one adds some number of channels to the server.  The channel
constructor has one required parameter telling it which server the
channel is to use.

    (defvar *c* (make-instance 'unet:raw-channel :server *s*))

At this point in time, only the `raw-channel` is available.  Data sent
to the `raw-channel` is sent as-is with no further wrapping from the
UNet library.  Note: It does not make sense to have more than one
`raw-channel` per `server` instance because, without any wrapping at
all, it is impossible for the UNet library to distinguish which
`raw-channel` an incoming message was supposed to be for.

Coming soon, there will be multiplexed channels with message-chunking
and various quality-of-service options.

After the server and channel are established, one can add recipients
to the channel or remove recipients from the channel.

    (defvar *r1* (make-instance 'unet:recipient
                                :hostname "client.host.com"
				:port 1187))
    (unet:channel-add-recipient *c1* *r1*)
    (unet:channel-remove-recipient *c1* *r1*)

Note: For most channels, it is unwise to remove recipients and then
add them again unless it has been coordinated with the recipient's end
of the channel.  There is per-recipient state at each end of the
channel that the UNet library will not resynchronize.

After one or more recipients are added to a channel, one can send a
message to a list of recipients for the channel.

    (unet:send-packet channel (list *r1*) payload)

If the list of recipients is `nil`, the payload is sent to all
recipients on the channel.  The `payload` is expected to be a
`userial:buffer`.  Note: if a recipient which has not been added to
the channel is specified in the `send-packet` list of recipients, UNet
will throw an exception with an `add-to-channel` restart to include
the recipient on the channel.

One can find all of the channels on a server that have messages.

    (let ((channel-list (unet:server-channels-with-messages server)))
       ...)

The `server-channels-with-messages` takes an optional second parameter
that, if not `nil`, makes the method wait until at least one channel
has messages.

One can check for incoming messages on a given channel.

    (multiple-value-bind (payload recipient)
        (unet:next-packet channel)
      (when recipient
        ...))

The `next-packet` function takes an optional second parameter
that if not `nil` will cause `next-packet` to also check the
server for more messages.

